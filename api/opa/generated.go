// Package opa provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package opa

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ApisixOutcome defines model for ApisixOutcome.
type ApisixOutcome struct {
	Result map[string]interface{} `json:"result"`
}

// Outcome defines model for Outcome.
type Outcome struct {
	// Allow The result of the OPA policy evaluation
	Allow bool `json:"allow"`
}

// EvaluateDocumentParams defines parameters for EvaluateDocument.
type EvaluateDocumentParams struct {
	// Request request line from nginx
	Request string `json:"request"`

	// XUserinfo token introspection result
	XUserinfo map[string]interface{} `json:"X-Userinfo"`
}

// EvaluateDocumentApisixJSONBody defines parameters for EvaluateDocumentApisix.
type EvaluateDocumentApisixJSONBody = map[string]interface{}

// EvaluateDocumentApisixJSONRequestBody defines body for EvaluateDocumentApisix for application/json ContentType.
type EvaluateDocumentApisixJSONRequestBody = EvaluateDocumentApisixJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// calls https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-document-with-input internally
	// (POST /v1/data)
	EvaluateDocument(ctx echo.Context, params EvaluateDocumentParams) error
	// calls https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-document-with-input internally
	// (POST /v1/data/apisix)
	EvaluateDocumentApisix(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// EvaluateDocument converts echo context to params.
func (w *ServerInterfaceWrapper) EvaluateDocument(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params EvaluateDocumentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "request" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("request")]; found {
		var Request string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for request, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "request", valueList[0], &Request, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request: %s", err))
		}

		params.Request = Request
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter request is required, but not found"))
	}
	// ------------- Required header parameter "X-Userinfo" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Userinfo")]; found {
		var XUserinfo map[string]interface{}
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Userinfo, got %d", n))
		}

		err = json.Unmarshal([]byte(valueList[0]), &XUserinfo)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'X-Userinfo' as JSON")
		}

		params.XUserinfo = XUserinfo
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Userinfo is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EvaluateDocument(ctx, params)
	return err
}

// EvaluateDocumentApisix converts echo context to params.
func (w *ServerInterfaceWrapper) EvaluateDocumentApisix(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EvaluateDocumentApisix(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/data", wrapper.EvaluateDocument)
	router.POST(baseURL+"/v1/data/apisix", wrapper.EvaluateDocumentApisix)

}

type EvaluateDocumentRequestObject struct {
	Params EvaluateDocumentParams
}

type EvaluateDocumentResponseObject interface {
	VisitEvaluateDocumentResponse(w http.ResponseWriter) error
}

type EvaluateDocument200JSONResponse Outcome

func (response EvaluateDocument200JSONResponse) VisitEvaluateDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EvaluateDocumentApisixRequestObject struct {
	Body *EvaluateDocumentApisixJSONRequestBody
}

type EvaluateDocumentApisixResponseObject interface {
	VisitEvaluateDocumentApisixResponse(w http.ResponseWriter) error
}

type EvaluateDocumentApisix200JSONResponse ApisixOutcome

func (response EvaluateDocumentApisix200JSONResponse) VisitEvaluateDocumentApisixResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// calls https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-document-with-input internally
	// (POST /v1/data)
	EvaluateDocument(ctx context.Context, request EvaluateDocumentRequestObject) (EvaluateDocumentResponseObject, error)
	// calls https://www.openpolicyagent.org/docs/latest/rest-api/#get-a-document-with-input internally
	// (POST /v1/data/apisix)
	EvaluateDocumentApisix(ctx context.Context, request EvaluateDocumentApisixRequestObject) (EvaluateDocumentApisixResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// EvaluateDocument operation middleware
func (sh *strictHandler) EvaluateDocument(ctx echo.Context, params EvaluateDocumentParams) error {
	var request EvaluateDocumentRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EvaluateDocument(ctx.Request().Context(), request.(EvaluateDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EvaluateDocument")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EvaluateDocumentResponseObject); ok {
		return validResponse.VisitEvaluateDocumentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EvaluateDocumentApisix operation middleware
func (sh *strictHandler) EvaluateDocumentApisix(ctx echo.Context) error {
	var request EvaluateDocumentApisixRequestObject

	var body EvaluateDocumentApisixJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EvaluateDocumentApisix(ctx.Request().Context(), request.(EvaluateDocumentApisixRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EvaluateDocumentApisix")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EvaluateDocumentApisixResponseObject); ok {
		return validResponse.VisitEvaluateDocumentApisixResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
